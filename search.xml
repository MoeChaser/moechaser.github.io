<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[开闭原则]]></title>
    <url>%2FTechnology%2FDesign-Pattern%2F2018%2F09%2F05%2Fopen-closed-principle%2F</url>
    <content type="text"><![CDATA[定义一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。（Software entities like classes,modules and functions should be open for extension but closed for modifications.） 解释软件实体应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化。一个软件产品只要在生命期内，都会发生变化，我们应该在设计时尽量适应这些变化，以提高项目的稳定性和灵活性。开闭原则告诉我们应尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来完成变化，它是为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则。开闭原则对扩展开放，对修改关闭，并不意味着不做任何修改。低层模块的变更，必然要有高层模块进行适配，否则就是一个孤立无意义的代码片段。 优点开闭原则是最基础的一个原则，其他前五个原则是指导设计的具体工具和方法。 开闭原则对测试的影响修改已有代码往往也意味着修改对应的测试用例，如果不熟悉用例，修改可能会产生错误。通过扩展新增的代码，可以不修改已有测试用例，只通过新增用例覆盖扩展代码即可。 开闭原则可以提高复用性 开闭原则可以提高可维护性维护人员通过扩展完善功能或者修复问题，不要在原有代码上进行修改。修改不仅需要理解原有代码的逻辑，修改过程中也可能引入新的问题。 面向对象开发的要求把事物抽象成对象，对对象进行操作。在设计之初考虑到可能变化的因素，然后设计接口。 如何使用开闭原则 抽象约束 通过接口或抽象类约束扩展，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的public方法； 参数类型、引用对象尽量使用接口或者抽象类，而不是实现类； 抽象层尽量保持稳定，一旦确定即不允许修改。 元数据（metadata）控制模块行为元数据是用来描述环境和数据的数据，通俗地说就是配置参数，参数可以从文件中获得，也可以从数据库中获得。典型例子是控制反转（Inversion of Control），使用最多的是Spring容器，在SpringContext配置文件中，可以通过修改配置文件，完成业务变化。 制定项目章程项目章程指定了所有人员都必须遵守的约定，对项目来说，约定优于配置。 封装变化对变化的封装包含两层含义：第一，将相同的变化封装到一个接口或抽象类中；第二，将不同的变化封装到不同的接口或抽象类中，不应该有两个不同的变化出现在同一个接口或抽象类中。找出预计有变化或不稳定的点，我们为这些变化点创建稳定的接口，准确地讲是封装可能发生的变化，23个设计模式都是从各个不同的角度对变化进行封装的。]]></content>
      <categories>
        <category>Technology</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[迪米特法则]]></title>
    <url>%2FTechnology%2FDesign-Pattern%2F2018%2F09%2F05%2Flaw-of-demeter%2F</url>
    <content type="text"><![CDATA[定义一个对象应该对其他对象有最少的了解。又称最少知识原则（Least Knowledge Principle）。 解释一个类应该对自己需要耦合或调用的类知道得最少，包含以下4层含义。 只和朋友交流迪米特法则还有一个英文解释是：Only talk to your immediate friends（只与直接的朋友通信。）两个对象之间的耦合就成为朋友关系。一个类只和朋友交流，不与陌生类交流。类与类之间的关系是建立在类间的，而不是方法间，因此一个方法尽量不引入一个类中不存在的对象。 朋友间也是有距离的尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protected等访问权限。一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。因此，为了保持朋友类间的距离，在设计时需要反复衡量：是否还可以再减少public方法和属性。 是自己的就是自己的如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。 谨慎使用Serializable当通过序列化进行对象传输的时候，如果对象修改了属性的访问权限，而传输的另一方没有进行同步修改，则会报序列化失败。（这一条属于迪米特法则的含义么？） 总结迪米特法则的核心观念就是类间解耦，弱耦合。但是弱耦合可能产生大量的中转或跳转类，导致系统的复杂性提高，维护难度增加。因此在设计时需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。]]></content>
      <categories>
        <category>Technology</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[接口隔离原则]]></title>
    <url>%2FTechnology%2FDesign-Pattern%2F2018%2F08%2F28%2Finterface-segregation-principle%2F</url>
    <content type="text"><![CDATA[定义 客户端不应该依赖它不需要的接口。(Clients should not be forced to depend upon interfaces that they don’t use.) 类间的依赖关系应该建立在最小的接口上。(The dependency of one class to another one should depend on the smallest possible interface.) 解释接口细化，功能纯洁，接口中的方法尽量少，不要建立臃肿庞大的接口。接口隔离原则是对接口进行规范约束，其包含以下4层含义： 接口要尽量小这是接口隔离原则的核心定义，不出现臃肿的接口。根据接口隔离原则拆分接口时，首先必须满足单一职责原则。不能为了拆分接口破坏业务逻辑的整体性。 接口要高内聚高内聚就是提高接口、类、模块的处理能力，减少对外的交互。具体到接口隔离原则就是，要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本。 定制服务一个系统或系统内的模块之间必然会有耦合，有耦合就要有相互访问的接口。我们在做系统设计时需要考虑对系统之间或模块之间的接口采用定制服务，即为对应模块提供其仅需要的接口实现。 接口设计是有限度的接口的设计粒度越小，系统越灵活。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性降低。接口设计的“度”取决于具体场景和经验。 与SRP的差异接口隔离原则与单一职责原则的审视角度不同。单一职责原则要求接口职责单一，注重业务逻辑上的职能。接口隔离原则要求接口方法尽量少且功能纯粹。 此处没有理解清楚，需要补充。 最佳实践 一个接口只服务于一个子模块或业务逻辑 压缩接口中的public方法 已经被污染了的接口，尽量去修改，若变更的风险较大，则采用适配器模式进行转化处理 了解环境，拒绝盲从。切忌照抄，要根据实际业务逻辑设计接口。]]></content>
      <categories>
        <category>Technology</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[依赖倒置原则]]></title>
    <url>%2FTechnology%2FDesign-Pattern%2F2018%2F08%2F27%2Fdependence-inversion-principle%2F</url>
    <content type="text"><![CDATA[定义高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。（High level modules should not depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details.Details should depend upon abstractions.） 解释 每一个逻辑的实现都是由原子逻辑组成的，不可分割的原子逻辑就是低层模块，原子逻辑的再组装就是高层模块。 抽象就是指接口或抽象类，两者都是不能直接被实例化的。 细节就是实现类，实现接口或继承抽象类而产生的类就是细节，其特点就是可以直接被实例化。 依赖倒置原则在Java语言中的表现就是： 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的； 接口或抽象类不依赖于实现类； 实现类依赖接口或抽象类。 简而言之，面向接口编程。 依赖的三种写法 构造函数传递依赖对象在类中通过构造函数声明依赖对象，又叫做构造函数注入。 Setter方法传递依赖对象通过Setter方法声明依赖关系，又叫做Setter依赖注入。 接口声明依赖对象在接口的方法参数中声明依赖对象，又叫做接口注入。 最佳实践 每个类尽量都有接口或抽象类，或者抽象类和接口两者都具备，有了抽象才可能依赖倒置。 变量的表面类型尽量是接口或者是抽象类。 任何类都不应该从具体类派生。这条规则在实际项目中较难做到，但在架构设计时，应该参考这条原则。 尽量不要覆写基类的方法。类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会产生一定的影响。 结合里氏替换原则使用。接口负责定义public属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑。 优点 减少类间的耦合性 提高系统的稳定性 降低并行开发引起的风险 提高代码的可读性和可维护性 思考 抽象是对实现的约束，也是与外部的契约，保证约束双方按照既定契约进行实现。 依赖正置是指类间的依赖是实实在在的实现类间的依赖，也就是面向实现编程，这也是正常人的思维方式。而编写程序是对现实世界的事物进行抽象，抽象的结果是有了抽象类和接口，然后我们根据系统设计的需要产生了抽象间的依赖，代替了人们传统思维中的事物间的依赖，因此称为“倒置”。]]></content>
      <categories>
        <category>Technology</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[里氏替换原则]]></title>
    <url>%2FTechnology%2FDesign-Pattern%2F2018%2F08%2F24%2Fliskov-substitution-principle%2F</url>
    <content type="text"><![CDATA[定义 定义1：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型。（If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.） 定义2：所有引用基类的地方必须能透明地使用其子类的对象。（Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.） 解释只要父类能出现的地方子类就可以出现，并且替换为子类也不会产生任何错误或异常，使用者可能不需要知道实际对象是父类还是子类。 里氏替换原则为良好的继承定义了一个规范，一句简单的定义包含了4层含义。 子类必须完全实现父类的方法 子类需要完全实现父类的方法，只有这样，当通过父类或接口进行调用时，才不会产生异常。如果不能使用父类或接口，则说明类的设计已经违背了LSP原则。 如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生“畸变”，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承。 子类可以有自己的个性 子类可以有自己的属性与方法，在特定场景中使用。 里氏替换原则强调的是在所有引用基类的地方必须能透明地使用其子类的对象。反过来却不一定可行，即在子类出现的地方，父类未必就可以胜任。 覆盖或实现父类的方法时输入参数可以被放大 这句话的意思是子类在定义父类中已经有的方法的时候，可以将方法参数类型改为可以表示更大范围的参数类型，仍然符合里氏替换原则。如父类方法的参数类型是HashMap，子类方法的参数类型是Map，Map表示的范围比HashMap更大，此时在引用父类的地方通过子类对象调用该方法，实际执行的是父类中定义的方法，符合里氏替换原则。子类的这种方法定义实际是重载（Overload），不是覆写（Override）。 如果子类方法的参数类型比父类方法的参数类型范围更小，则不符合里氏替换原则。例如，父类方法参数类型是Map，子类方法参数类型是HashMap，在引用父类的地方通过子类对象调用该方法，传入参数实际类型是HashMap，实际执行的是子类中定义的方法。然而子类的这个方法并没有覆写（Override）父类的方法（实际是重载），却在引用父类的地方被执行。其行为违反了上面的定义1，所以不符合里氏替换原则。 覆写或实现父类的方法时输出结果可以被缩小 子类在覆写或实现父类方法时，其声明的返回值类型的范围必须小于等于父类方法声明的返回值类型。例如，父类方法返回值类型是S，子类方法返回值类型是T，要么T与S是相同类型，要么T是S的子类。 如果子类方法的返回值类型比父类方法范围更大，则编译会报错，返回值类型不兼容。 优点 增强程序的健壮性，版本升级时也可以保持较好的兼容性。即使增加子类，原有的子类还可以继续运行；接口使用父类作为参数类型，无需改变接口即可扩展功能。 思考 在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有“个性”，这个子类和父类之间的关系就很难调和了，把子类当做父类使用，子类的“个性”被抹杀——子类的特殊场景不能满足使用要求；把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离——缺乏类替换的标准。 本文是《设计模式之禅（第2版）》的读书笔记，文中的图示大多来自于本书，图片版权归原书作者所有。]]></content>
      <categories>
        <category>Technology</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单一职责原则]]></title>
    <url>%2FTechnology%2FDesign-Pattern%2F2018%2F08%2F02%2Fsingle-responsibility-principle%2F</url>
    <content type="text"><![CDATA[定义应该有且仅有一个原因引起类的变更（There should never be more than one reason for a class to change.） 解释只有一个原因引起变化，也就是一个接口或类只有一个职责，它只负责一件事情。 举例以电话为例，电话通话包括三个过程：拨号、通话、挂断。写一个接口如下图： 这个接口比较简单，大部分人也会认为没有问题。但实际上，这个接口不只有一个职责，实际上包含了两个职责：一个是协议管理，负责通信过程的连接和断开，即dial()和hangup()方法；另一个是数据传送，在通话过程中传输双方的对话，即chat()。协议管理的变化（例如更换运营商）会引起这个接口或实现类的变化，数据传送的变化（例如除了传输语音数据外，也可以传输网络数据）也会引起这个接口或实现类的变化。因此这里有两个原因引起了类的变化。我们考虑将这个接口拆分成两个接口，如下图所示： 这个类图满足了单一职责原则的要求，每个接口职责分明。但是电话类需要把ConnectionManager和DataTransfer组合在一起才能使用，组合是一种强耦合关系，同时类的数量也增加了，实际上增加了设计的复杂性。因此我们修改类的设计如下图： 实现类实现了两个接口，在面向接口编程的原则下，接口的设计满足了单一职责原则，一个接口修改对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。 优点 类的复杂性降低，实现什么职责都有清晰明确的定义； 可读性提高，复杂性降低，那当然可读性提高了； 可维护性提高，可读性提高，那当然更容易维护了。 思考 单一职责原则最难划分的就是职责，一个职责一个接口，但问题是“职责”没有一个量化的标准，一个类到底要负责那些职责？这些职责该怎么细化？细化后是否都要有一个接口或类？这些都需要从实际的项目去考虑。 从功能上来说，定义一个IPhone接口也没有错，实现了电话的功能，而且设计还很简单，仅仅一个接口一个实现类，实际的项目可能大家都会这么设计。项目要考虑可变因素和不可变因素，以及相关的收益成本比率，因此设计一个IPhone接口也可能是没有错的。只是从SRP的严格定义来分析就有问题了。 对于接口，我们在设计的时候一定要做到单一，但是对于实现类就需要多方面考虑了。生搬硬套单一职责原则会引起类的剧增，给维护带来非常多的麻烦，而且过分细分类的职责也会人为地增加系统的复杂性。本来一个类可以实现的行为硬要拆成两个类，然后再使用聚合或组合的方式耦合在一起，人为制造了系统的复杂性。原则是死的，人是活的。 单一职责适用于接口、类，同时也适用于方法。一个方法承担一个职责。 接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。 本文是《设计模式之禅（第2版）》的读书笔记，文中的图示大多来自于本书，图片版权归原书作者所有。]]></content>
      <categories>
        <category>Technology</category>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
</search>
